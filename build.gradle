//Apply required Gradle plugins
apply plugin: 'java'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

//Define version numbers for the java libraries and dependencies
//Java utilities/helper libraries
ext.commonsLang3Version = '3.12.0'
ext.lombokVersion = '1.18.24'

//coveralls
ext.coverallsVersion = '2.12.0'

//Java faker (for test data generation)
ext.javaFakerVersion = '1.0.2'

//test
ext.junitVersion = '5.8.2'
ext.mockitoCoreVersion = '4.9.0'
ext.byteBuddyVersion = '1.12.19'
ext.springStarterTestVersion = '2.7.0'
ext.equalsVerifierVersion = '3.10'
ext.toStringVerifierVersion = '1.4.8'
ext.h2Version = '2.1.214'
ext.hsqldbVersion = '2.7.1'

//spring
ext.springBootVersion = '2.7.5'
ext.springDocVersion = '1.6.9'

//Spring/Dependency Injection
ext.springContextVersion = '6.0.8'

//Logging
ext.log4jCoreVersion = '2.17.2'
ext.log4jApiVersion = '2.17.2'

//PostgreSQL
ext.PostgreSqlJdbcDriverVersion = '42.3.6'
ext.SpringBootStarterJdbcVersion = '2.7.0'
ext.SpringBootStarterDataJpaVersion = '2.7.0'

//Specify the group for all gradle sub projects defined in gradle.settings
//The repositories block defines where the build system will look for required libraries
allprojects {

    group "org.eatsy"
    repositories {
        mavenCentral()
    }

}

//Applies the Java, JaCoCo and dependency management plugins to subprojects.
//Defines the repositories for finding required libraries in all subprojects.
//Sets up the JUnit testing platform and specifies logging levels for test when executing gradle test commands.
subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "PASSED", "SKIPPED", "FAILED"
        }
    }

}

//The buildscript section declares the dependencies required by the Gradle build system to build the project.
// Here, the buildscript block specifies a single dependency on the spring-boot-gradle-plugin with version 2.7.5,
// and another dependency on the coveralls-gradle-plugin with version 2.12.0. These plugins are used to build the
// Spring Boot application and to generate and upload code coverage reports, respectively.
buildscript {
    ext {
        springBootGradlePluginVersion = '2.7.5'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootGradlePluginVersion"
        classpath "gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0"
    }
}


//JaCoCo and coveralls configuration below

// There are several tasks defined  to merge, generate, and upload code coverage reports.
// The jacocoMerge task uses the JacocoMerge type to merge code coverage data from multiple projects into a single report.
// This task depends on the test task in each of the gradle subprojects  and the resulting
// executionData is saved to the file allTestCoverageFile.

// The jacocoRootReport task generates an aggregate report of code coverage data by using the JacocoReport type.
// This task depends on the test task in each of the gradle subprojects and the jacocoMerge task,
// and it generates both a HTML and an XML report.

// Finally, the coveralls task uses the Coveralls Gradle plugin to upload the code coverage report generated by
// the jacocoRootReport task to the Coveralls service.
// The source directories, which are the directories containing the Java source code, are defined as
// devProjects.sourceSets.main.allSource.srcDirs.flatten(). The location of the Jacoco XML report is specified
// as "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml".
// The coveralls task depends on the jacocoRootReport task and is grouped with other coverage reports tasks
// under the 'Coverage reports' group.


def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"
def devProjects = subprojects.findAll { it.path != 'test' } //Exclude test code projects

task jacocoMerge(type: JacocoMerge) {
    devProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
    destinationFile = file(allTestCoverageFile)
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn devProjects.test, jacocoMerge

    getAdditionalSourceDirs().setFrom(files(devProjects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(devProjects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(devProjects.sourceSets.main.output))
    executionData jacocoMerge.destinationFile

    reports {
        html.required = true // human readable
        xml.required = true // required by coveralls
    }
}

coveralls {
    sourceDirs = devProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'
    dependsOn jacocoRootReport
}
