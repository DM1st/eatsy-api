#Configuration to define the version of Docker Compose and the services in the multi-container application

#API service
#builds the "dockerfile" in the root of this project specified by "." and applies the specified tag with the image paramter
#Always restart the container if it stops.
#Tells Docker to expose the API's container port 8080 to the host port 8080
#The complete start-up of the API service depends_on the PostgresSQL being healthy
#The list of environment configurations that you would see in the Spring Boot project application.properties file.
#These configurations connect and authenticate the API service with the PostgresSQL service.

#PostgreSQL service
#The image on which your database container will run of postgres Docker image.
#The service exposes port 5432 to the host machine, port 5432. The API service can connect to the database using SPRING_DATASOURCE_URL in its environment configuration.
#Next is a list of environment configurations that authenticates the PostgreSQL database.
#The final configuration healthcheck tests the database using the command "pg_isready -U postgres" on intervals to make sure
#that the database service has started up fully and service_healthy as the API service depends_on the database has been up fully to complete its start-up.

version: '3.1'
services:
  api_service:
    image: dm1st/eatsy-api-docker:latest
    build: .
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      PostgreSQL:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://PostgreSQL:5432/eatsy
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  PostgreSQL:
    image: postgres
    container_name: local_pgdb
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=eatsy
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container # override default value
    restart: always #restart container when either the Docker daemon restarts or the container is restarted.
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    volumes: #to mount a folder from the host machine to the container. path in the host where the db data is stored. Otherwise data will be lost when the container shuts down
      - ./data:/var/lib/postgresql/data