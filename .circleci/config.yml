version: 2.0
jobs:
  build:

    docker:
      - image: circleci/openjdk:8-jdk #Primary image - all commands run in this image. (Required for Springboot/java)

      - image: circleci/postgres:9.6.2-alpine #Secondary(/service) image needed as the application has a DB
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: eatsy
    working_directory: ~/eatsy

    general:
      branches:
        only: # list of branches to build
          - develop

    steps:
      - checkout #Get sourcecode from Github

      # Download and cache dependencies - optimise so no need to download deps everytime src code is checked out
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}

      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}

      - run: #Installation of dockerize which ensures that after the db gets ready, only then will the app be able to make connections with it
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run: #Install postgres client and create database
          name: Wait for db
          command: sudo dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Install postgres client
          command: sudo apt update && apt install postgresql-client
      - run:
          name: Create eatsy database
          command: psql -U postgres -c "eatsy"

      - run: #For invoking command line
          name: Run tests
          #Give gradlew execution permissions (chmod=+x) via git for this to work
          command: ./gradlew coveralls