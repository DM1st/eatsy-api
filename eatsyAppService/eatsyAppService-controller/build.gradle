//To use Log4J2 in spring boot projects you must exclude the default dependency of the Spring Boot starter on
// Logback classic and instead include the Spring Boot starter dependency on Lg4J2
configurations {
    all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {

    implementation project(':eatsyAppService:eatsyAppService-model')
    implementation project(':eatsyAppService:eatsyAppService-service')
    implementation project(':eatsyAppService:eatsyAppService-persistence') //TODO remove
    testImplementation project(':eatsyAppService:eatsyAppService-test-data-generation')

    //Java utilities/helper libraries
    implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
    implementation "commons-io:commons-io:$commonsIoVersion"

    //Spring boot  - if using the spring boot starter module with log4j2 in other gradle project then exclude the default logback logging using configurations
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"

    //logging
    implementation "org.apache.logging.log4j:log4j-core:$log4jCoreVersion"
    implementation "org.apache.logging.log4j:log4j-api:$log4jApiVersion"

    //Spring API annotations swagger spec and ui
    implementation "org.springdoc:springdoc-openapi-ui:$springDocVersion"

    //Mockito testing
    implementation "net.bytebuddy:byte-buddy:$byteBuddyVersion" //compile dependency for Mockito Core
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springStarterTestVersion"
    testImplementation "org.mockito:mockito-core:$mockitoCoreVersion"
    //(In JUnit 5 the API is separated from the runtime)
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

}

//The below configuration is required so that the eatsyAppService-controller project jar is built in 4 layers.
//The decomposition of the application into different layers allows for the creation of an efficient Docker image.
//This improves efficiency and start up time of the docker image , especially if being run on limited infrastructure.
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
mainClassName = 'org.eatsy.appservice.controller.application.ServerRunner'

bootJar {
    layered {
        application {
            intoLayer("spring-boot-loader") {
                include("org/springframework/boot/loader/**")
            }
            intoLayer("application")
        }
        dependencies {
            intoLayer("module-dependencies") {
                include("org.eatsy:*:*")
            }
            intoLayer("dependencies")
        }
        layerOrder = ["dependencies", "spring-boot-loader", "module-dependencies", "application"]
    }
}